!pip install opencv-python

import cv2
import numpy as np
import matplotlib.pyplot as plt


# Load image (OpenCV loads in BGR format)
image = cv2.imread("sample.jpg")  # Replace with your image name

# Convert BGR to RGB for correct display in matplotlib
image_rgb = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)

# Display image
plt.imshow(image_rgb)
plt.title("Original Image")
plt.axis('off')
plt.show()


gray_image = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)

plt.imshow(gray_image, cmap='gray')
plt.title("Grayscale Image")
plt.axis('off')
plt.show()


resized_image = cv2.resize(image, (200, 200))

plt.imshow(cv2.cvtColor(resized_image, cv2.COLOR_BGR2RGB))
plt.title("Resized Image (200x200)")
plt.axis('off')
plt.show()


blurred_image = cv2.GaussianBlur(image, (7, 7), 0)

plt.imshow(cv2.cvtColor(blurred_image, cv2.COLOR_BGR2RGB))
plt.title("Blurred Image")
plt.axis('off')
plt.show()



edges = cv2.Canny(image, threshold1=100, threshold2=200)

plt.imshow(edges, cmap='gray')
plt.title("Canny Edge Detection")
plt.axis('off')
plt.show()


image_copy = image.copy()

# Draw a rectangle (Red, 3 px thick)
cv2.rectangle(image_copy, (50, 50), (200, 200), (0, 0, 255), 3)

# Draw a circle (Blue, filled)
cv2.circle(image_copy, (150, 150), 40, (255, 0, 0), -1)

# Convert and display
plt.imshow(cv2.cvtColor(image_copy, cv2.COLOR_BGR2RGB))
plt.title("Shapes on Image")
plt.axis('off')
plt.show()



cv2.imwrite("processed_output.jpg", image_copy)
print("Image saved as 'processed_output.jpg'")
